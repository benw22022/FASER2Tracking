
# Set the minimum version of CMake that's required
cmake_minimum_required(VERSION 3.12)
macro(setup_library)

  set(options interface register_target)
  set(oneValueArgs module name)
  set(multiValueArgs dependencies sources)
  cmake_parse_arguments(setup_library "${options}" "${oneValueArgs}"
                        "${multiValueArgs}" ${ARGN})

  # Build the library name and source path
  set(library_name "${setup_library_module}")
  set(src_path "${PROJECT_SOURCE_DIR}/src/${setup_library_module}")
  set(include_path "include/${setup_library_module}")
  if(setup_library_name)
    set(library_name "${setup_library_module}_${setup_library_name}")
    set(src_path "${src_path}/${setup_library_name}")
    set(include_path "${include_path}/${setup_library_name}")
  endif()

  # If not an interface, find all of the source files we want to add to the
  # library.
  if(NOT setup_library_interface)
    if(NOT setup_library_sources)
      file(GLOB SRC_FILES CONFIGURE_DEPENDS ${src_path}/[a-zA-Z]*.cc)
    else()
      set(SRC_FILES ${setup_library_sources})
    endif()

    # Create the SimCore shared library
    add_library(${library_name} SHARED ${SRC_FILES})
  else()
    add_library(${library_name} INTERFACE)
  endif()

  # Setup the include directories
  if(setup_library_interface)
    target_include_directories(${library_name}
                               INTERFACE ${PROJECT_SOURCE_DIR}/include)
  else()
    target_include_directories(${library_name}
                               PUBLIC ${PROJECT_SOURCE_DIR}/include)
  endif()

  # Setup the targets to link against
  target_link_libraries(${library_name} PUBLIC ${setup_library_dependencies})
  # enable_sanitizers(${library_name})
  # enable_compiler_warnings(${library_name})
  # enable_ipo(${library_name})
  # enable_clang_tidy(${library_name} ${WARNINGS_AS_ERRORS})

  # Define an alias. This is used to create the imported target.
  set(alias "${setup_library_module}::${setup_library_module}")
  if(setup_library_name)
    set(alias "${setup_library_module}::${setup_library_name}")
  endif()
  add_library(${alias} ALIAS ${library_name})

  if(setup_library_register_target)
    set(registered_targets
        ${registered_targets} ${alias}
        CACHE INTERNAL "registered_targets")
  endif()

  # Install the libraries and headers
  install(TARGETS ${library_name}
          LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
  install(DIRECTORY ${PROJECT_SOURCE_DIR}/${include_path}
          DESTINATION ${CMAKE_INSTALL_PREFIX}/include)

endmacro()

macro(setup_python)

  set(oneValueArgs package_name)
  cmake_parse_arguments(setup_python "${options}" "${oneValueArgs}"
                        "${multiValueArgs}" ${ARGN})

  # If the python directory exists, initialize the package and copy over the
  # python modules.
  if(EXISTS ${PROJECT_SOURCE_DIR}/python)

    # Get a list of all python files inside the python package
    file(GLOB py_scripts CONFIGURE_DEPENDS
         ${PROJECT_SOURCE_DIR}/python/[a-zA-Z]*.py
         ${PROJECT_SOURCE_DIR}/python/[a-zA-Z]*.py.in)

    foreach(pyscript ${py_scripts})

      # If a filename has a '.in' extension, remove it.  The '.in' extension is
      # used to denote files that have variables that will be substituded by the
      # configure_file macro.
      string(REPLACE ".in" "" script_output ${pyscript})

      # GLOB returns the full path to the file.  We also need the filename so
      # it's new location can be specified.
      get_filename_component(script_output ${script_output} NAME)

      # Copy the file from its original location to the bin directory.  This
      # will also replace all cmake variables within the files.
      configure_file(${pyscript}
                     ${CMAKE_CURRENT_BINARY_DIR}/python/${script_output})

      # Install the files to the given path
      install(
        FILES ${CMAKE_CURRENT_BINARY_DIR}/python/${script_output}
        DESTINATION ${CMAKE_INSTALL_PREFIX}/python/${setup_python_package_name})
    endforeach()

  endif()

endmacro()

# Set the project name and version.
project(Tracking VERSION 0.0.0
                 DESCRIPTION "Module containing the sim code for the FASER2 trackers."
                 LANGUAGES CXX
)

# Search for ROOT and add all targets.
find_package(ROOT CONFIG REQUIRED)
find_package(Eigen3 CONFIG REQUIRED)
find_package(Geant4 REQUIRED)
find_package(ZLIB REQUIRED)
message(STATUS "ZLIB_LIBRARIES: ${ZLIB_LIBRARIES}")
message(STATUS "ZLIB_INCLUDE_DIRS: ${ZLIB_INCLUDE_DIRS}")

file(GLOB sources ${PROJECT_SOURCE_DIR}/source/*.cc)
file(GLOB headers ${PROJECT_SOURCE_DIR}/include/*.hh)


# if you want to try an alternate Acts, you can
# 1. comment out the stuff here and replace with add_subdirectory(acts)
# 2. git clone acts into this directory and choose your version
find_package(Acts QUIET)
if (NOT Acts_FOUND)
  message(STATUS "Did not find Acts, downloading and compiling it here")
  include(FetchContent)
  FetchContent_Declare(
      Acts
      URL https://github.com/acts-project/acts/archive/refs/tags/v36.0.0.tar.gz
      URL_HASH MD5=f543dd8ba030bea2e4ee2f1b07dbe7c0
  )
  FetchContent_MakeAvailable(Acts)
  FetchContent_GetProperties(Acts)
  # Adding Acts as "SYSTEM" 
  # which will silence compiler warnings from these 3rd party softwares
  include_directories(SYSTEM "${Acts_SOURCE_DIR}/Core/include")
else()
  message(STATUS "Found Acts ${Acts_VERSION}")
endif()


# file(GLOB SRC_FILES CONFIGURE_DEPENDS 
#   ${PROJECT_SOURCE_DIR}/source/[a-zA-z]*.cc
# )

# add_library(Geant4::Interface INTERFACE IMPORTED GLOBAL)

# # Set the target properties
# set_target_properties(
#   Geant4::Interface
#   PROPERTIES INTERFACE_LINK_LIBRARIES "${Geant4_LIBRARIES}"
#              INTERFACE_COMPILE_OPTIONS "${Geant4_Flags}"
#              INTERFACE_COMPILE_DEFINITIONS "${LDMX_Geant4_DEFINITIONS}"
#              INTERFACE_INCLUDE_DIRECTORIES "${Geant4_INCLUDE_DIRS}")


# setup_library(module Tracking
#               dependencies ActsCore
#                            Geant4::Interface
#                            ROOT::Physics
#               sources ${SRC_FILES})

add_library(MyTrackingLibrary SHARED sources)
target_include_directories(MyTrackingLibrary PUBLIC include)

target_link_libraries(Tracking PUBLIC ActsCore Geant4 ROOT)

# target_link_libraries(Tracking PUBLIC ${ZLIB_LIBRARIES})



# setup_python(package_name FASER2/Tracking)